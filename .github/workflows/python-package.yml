# This workflow will install Python dependencies and run tests with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build and test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    #Checkout repo
    - uses: actions/checkout@v3

    #Setup python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    #Install poetry
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    #Load cached venv
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    #Install dependencies if no cached venv
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    #Install root project
    - name: Install project
      run: poetry install --no-interaction

    #Install plike
    - name: Build plike
      run: |
        sudo apt install gfortran
        sh build_plike.sh

    #Run tests
    - name: Test with pytest-cov
      run: |
        source .venv/bin/activate
        pytest . --cov=pypetal

    #Upload to CodeCov
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
